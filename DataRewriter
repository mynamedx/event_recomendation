"""
8.构建特征 将保存在本地的统计数据读取出来
"""
from __future__ import division
import _pickle as cPickle
import numpy as np
import scipy.io as sio
"""
基于用户 物品的协同过滤
"""
class DataRewriter:
    def __init__(self):
        #读入数据做初始化
        self.userIndex = cPickle.load(open("PE_userIndex.pkl", 'rb'))
        self.eventIndex = cPickle.load(open("PE_eventIndex.pkl",'rb'))
        self.userEventScores = sio.mmread("PE_userEventScores").todense()
        self.userSimMatrix = sio.mmread("US_userSimMatrix").todense()# 返回一个矩阵
        self.eventPropSim = sio.mmread("EV_eventPropSim").todense()
        self.eventContSim = sio.mmread("EV_eventContSim").todense()
        self.numFriends = sio.mmread("UF_numFriends")
        self.userFriends = sio.mmread("UF_userFriends").todense()
        self.eventPopularity = sio.mmread("EA_eventPopularity").todense()

    def userReco(self, userId, eventId):
        # 根据user-based协同过滤，得到event的推荐度
        i = self.userIndex[userId]
        j = self.eventIndex[eventId]
        vs = self.userEventScores[:, j]
        sims = self.userSimMatrix[i, :]
        prod = sims * vs
        try:
            return prod[0, 0] - self.userEventScores[i, j]
        except IndexError:
            return 0

    def eventReco(self,userId, eventId):
        # 基于物品的协同过滤，得到event的推荐度
        i = self.userIndex[userId]
        j = self.eventIndex[eventId]
        js = self.userEventScores[i, :]
        psim = self.eventPropSim[:, j]
        csim = self.eventContSim[:, j]
        pprod = js * psim
        cprod = js * csim
        pscore = 0
        cscore = 0
        try:
            pscore = pprod[0,0] - self.userEventScores[i, j]
        except IndexError:
            pass
        try:
            cscore = cprod[0, 0] - self.userEventScores[i, j]
        except IndexError:
            pass
        return pscore, cscore

    def userPop(self,userId):
        #统计返回user的朋友个数 通过朋友个数推断用户社交程度
        if userId in self.userIndex:
        # if self.userIndex.has_keky(userId):
            i = self.userIndex[userId]
            try:
                return self.numFriends[0, i]
            except IndexError:
                return 0
        else: return 0

    def friendInfluence(self, userId):
        # 用户朋友对用户活跃度的影响
        # userFriends: doc_matrix, shape[len(users),len(users)]
        # 统计第i个user的第j个朋友活跃程度
        nusers = np.shape(self.userFriends)[1]
        i = self.userIndex[userId]
        return (self.userFriends[i, :].sum(axis=0) / nusers)[0,0]

    def eventPop(self,eventId):
        # 活动本身热度 通过参与人数决定
        i = self.eventIndex[eventId]
        return self.eventPopularity[i, 0]

    """
    生成训练集特征，测试集特征
    1.invited特征 是否被邀请
    2.基于用户的推荐结果
    3.基于event的推荐结果
    4.用户活跃程度（朋友数量）
    5.用户受朋友影响（朋友参加活动频繁程度）
    6.活动热度
    对于train：
    7.interest
    8.not interest
    """
    def rewriteData(self, start=1, train=True, header=True):
        # 前面生成的特征作为组合特征在一起
        # 生成新的训练数据用于分类器使用
        fn = "train.csv" if train else "test.csv"
        fin = open(fn, 'rb')
        fout = open("data_" + fn, 'wb')
        if header:
            ocolnames = ["invited","user_reco","evt_p_reco",
                         "evt_c_reco","user_pop","frnd_infl","evt_pop"]
            if train:
                ocolnames.append("interested")
                ocolnames.append("not_interested")
            # print(ocolnames,type(ocolnames),type(ocolnames[0]))
            x = ",".join(ocolnames)+ '\r\n' ###原来换行有问题+判断nan值
            y = x.encode('utf-8')
            fout.write(y) # file.write需要写入bytes，str不行
        ln = 0
        for line in fin:
            ln += 1
            if ln < start:
                continue
            cols = line.decode('utf-8').strip().split(",")
            userId = cols[0]
            eventId = cols[1]
            invited = cols[2]
            if ln%500 == 0:
                print('{}:{} (userId, eventId)=({},{})'.format(fn, ln, userId, eventId))
            user_reco = self.userReco(userId, eventId)
            evt_p_reco, evt_c_reco = self.eventReco(userId, eventId)
            # if evt_c_reco == float('nan'):# 加入是否为nan 的判断
            #     evt_c_reco = 0
            if str(evt_c_reco) == 'nan':# 加入是否为nan 的判断
                evt_c_reco = int(0)
            user_pop = self.userPop(userId)
            frnd_infl = self.friendInfluence(userId)
            evt_pop = self.eventPop(eventId)
            ocols = [invited, user_reco, evt_p_reco,
                     evt_c_reco, user_pop, frnd_infl, evt_pop]
            if train:
                ocols.append(cols[4])# interested
                ocols.append(cols[5])# not interested
            x = ",".join(map(lambda x: str(x),ocols))+'\r\n' #
            y = x.encode('utf-8')
            fout.write(y)
        fin.close()
        fout.close()

    def rewriteTrainingSet(self):
        self.rewriteData(True)

    def rewriteTestSet(self):
        self.rewriteData(False)

dr = DataRewriter()
print("生成训练数据")
dr.rewriteData(train=True, start=2, header=True)
print("生成预测数据")
dr.rewriteData(train=False,start=2,header=True)
